<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.weindependent.app.database.mapper.weindependent.SaveMapper">
    
    <insert id="saveBlog">
        INSERT IGNORE INTO save_list_article (list_id, article_id)
        VALUES (#{listId}, #{blogId});  
    </insert>

    <update id="updateSaveListMetadata">
        UPDATE save_list sl
        JOIN save_list_article sla ON sl.list_id = sla.list_id
        JOIN blog_article a ON sla.article_id = a.id
        LEFT JOIN blog_image i ON a.banner_img_id = i.id
        SET sl.last_edited_time = sla.saved_at,
            sl.last_edited_image = i.file_path
        WHERE sl.list_id = #{listId}
        AND sla.article_id = #{blogId}
    </update>

    <delete id="unsaveBlog">
        DELETE IGNORE FROM save_list_article
        WHERE list_id = #{listId} AND article_id = #{blogId}
    </delete>

    <select id = "blogIsSaved" resultType="boolean">
        SELECT EXISTS (
            SELECT 1
            FROM save_list sl
            JOIN save_list_article sla ON sl.list_id = sla.list_id
            WHERE sl.user_id = #{userId} AND sla.article_id = #{blogId}
        )
    </select>

    <select id = "allSavedArticles" resultType="com.weindependent.app.dto.BlogArticleCardQry">
        WITH ranked_articles AS (
            SELECT 
                a.id,
                a.title,
                a.update_time AS time,
                a.category_id AS category,
                'We Independent' AS author,
                i.file_path AS imageUrl,
                CASE 
                    WHEN a.content IS NULL THEN 0
                    ELSE CEIL((CHAR_LENGTH(a.content) - CHAR_LENGTH(REPLACE(a.content, ' ', '')) + 1) / 200) 
                END AS readingTime,
                CASE 
                    WHEN ep.id IS NOT NULL AND ep.status = 1 THEN TRUE
                    ELSE FALSE
                END AS editorsPick,
                COALESCE(s.savedCount, 0) AS savedCount,
                    sla.saved_at,
                ROW_NUMBER() OVER (PARTITION BY a.id ORDER BY sla.saved_at DESC) AS rn
            FROM save_list sl
                JOIN save_list_article sla ON sl.list_id = sla.list_id
                JOIN blog_article a ON a.id = sla.article_id
                LEFT JOIN blog_image i ON a.banner_img_id = i.id
                LEFT JOIN (
                    SELECT article_id, COUNT(*) AS savedCount
                    FROM save_list_article
                    GROUP BY article_id
                ) s ON a.id = s.article_id
                LEFT JOIN editor_picks ep ON a.id = ep.article_id
            WHERE sl.user_id = #{userId}
            AND a.is_deleted = 0
            AND a.article_status = 'published'
        )
        SELECT 
            id,
            title,
            time,
            category,
            author,
            imageUrl,
            readingTime,
            editorsPick,
            savedCount
        FROM ranked_articles
        WHERE rn = 1
        ORDER BY saved_at DESC
    </select>

   <select id = "existBlogId" resultType="boolean">
        SELECT 1 FROM blog_article WHERE id = #{blogId} LIMIT 1
    </select>

    <insert id="saveEvent">
        INSERT IGNORE INTO save_event (event_id, user_id)
        SELECT e.id, #{userId}
        FROM event e
        WHERE e.id = #{eventId} AND e.is_deleted = 0;
    </insert>

    <delete id="unsaveEvent">
        DELETE IGNORE FROM save_event
        WHERE user_id = #{userId} AND event_id = #{eventId}
    </delete>

   <select id = "existEventId" resultType="boolean">
        SELECT 1 FROM event WHERE id = #{eventId} LIMIT 1
    </select>


</mapper>
